{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "632201253108906278"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The Azure Region to deploy the resources into. Default: resourceGroup().location"
      }
    },
    "logsEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Switch to enable/disable DiagnosticSettings for the resources. Default: false"
      }
    },
    "cosmosEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Switch to enable/disable provisioning and exporting to a Cosmos DB NoSQL Account. Default: false"
      }
    },
    "storageExportEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Switch to enable/disable exporting CSVs to Azure Blob Storage. Default: true"
      }
    },
    "uniqueSuffix": {
      "type": "string",
      "defaultValue": "[substring(uniqueString(resourceGroup().id), 0, 5)]",
      "metadata": {
        "description": "A unique string to add as a suffix to all resources. Default: substring(uniqueString(resourceGroup().id), 0, 5)"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": "[format('log-spotifyexp-{0}', parameters('uniqueSuffix'))]",
      "metadata": {
        "description": "Log Analytics Workspace name. Default: log-spotifyexp-$<uniqueSuffix>"
      }
    },
    "appInsightsName": {
      "type": "string",
      "defaultValue": "[format('appi-spotifyexp-{0}', parameters('uniqueSuffix'))]",
      "metadata": {
        "description": "Application Insights name. Default: appi-spotifyexp-$<uniqueSuffix>"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('stspotifyexp{0}', replace(parameters('uniqueSuffix'), '-', ''))]",
      "metadata": {
        "description": "Storage Account name. Default: stspotifyexp$<uniqueSuffix>"
      }
    },
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "[format('asp-spotifyexp-{0}', parameters('uniqueSuffix'))]",
      "metadata": {
        "description": "App Service Plan name. Default: asp-spotifyexp-$<uniqueSuffix>"
      }
    },
    "functionAppName": {
      "type": "string",
      "defaultValue": "[format('func-spotifyexp-{0}', parameters('uniqueSuffix'))]",
      "metadata": {
        "description": "Function App name. Default: func-spotifyexp-$<uniqueSuffix>"
      }
    },
    "cosmosAccountName": {
      "type": "string",
      "defaultValue": "[format('cosno-spotifyexp-{0}', parameters('uniqueSuffix'))]",
      "metadata": {
        "description": "Cosmos DB Account name. Default: cosno-spotifyexp-$<uniqueSuffix>"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[format('kv-spotifyexp-{0}', parameters('uniqueSuffix'))]",
      "metadata": {
        "description": "Key Vault name. Default: kv-spotifyexp-$<uniqueSuffix>"
      }
    },
    "spotifyClientId": {
      "type": "securestring",
      "metadata": {
        "description": "Value of the Spotify-ClientID Key Vault secret"
      }
    },
    "spotifyClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "Value of the Spotify-ClientSecret Key Vault secret"
      }
    },
    "spotifyRefreshToken": {
      "type": "securestring",
      "metadata": {
        "description": "Value of the Spotify-RefreshToken Key Vault secret"
      }
    }
  },
  "variables": {
    "cosmosContainerNames": [
      "Following",
      "Library",
      "Playlist",
      "RecentlyPlayed"
    ]
  },
  "resources": [
    {
      "copy": {
        "name": "cosmosContainers",
        "count": "[length(variables('cosmosContainerNames'))]"
      },
      "condition": "[parameters('cosmosEnabled')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}/{2}', toLower(parameters('cosmosAccountName')), 'cosmos-spotifyexport', variables('cosmosContainerNames')[copyIndex()])]",
      "properties": {
        "resource": {
          "id": "[variables('cosmosContainerNames')[copyIndex()]]",
          "partitionKey": {
            "paths": [
              "/id"
            ],
            "kind": "Hash"
          },
          "indexingPolicy": {
            "indexingMode": "consistent",
            "automatic": true,
            "includedPaths": [
              {
                "path": "/*"
              }
            ],
            "excludedPaths": [
              {
                "path": "/_etag/?"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', toLower(parameters('cosmosAccountName')), 'cosmos-spotifyexport')]"
      ]
    },
    {
      "condition": "[parameters('cosmosEnabled')]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2024-05-15",
      "name": "[format('{0}/{1}', toLower(parameters('cosmosAccountName')), 'cosmos-spotifyexport')]",
      "properties": {
        "resource": {
          "id": "cosmos-spotifyexport"
        },
        "options": {
          "throughput": 1000
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('cosmosAccountName')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'Spotify-ClientId')]",
      "properties": {
        "value": "[parameters('spotifyClientId')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'Spotify-ClientSecret')]",
      "properties": {
        "value": "[parameters('spotifyClientSecret')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'Spotify-RefreshToken')]",
      "properties": {
        "value": "[parameters('spotifyRefreshToken')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "condition": "[parameters('cosmosEnabled')]",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'CosmosDB-ConnectionString')]",
      "properties": {
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('cosmosAccountName'))), '2024-05-15').connectionStrings[0].connectionString]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('cosmosAccountName')))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageAccount-ConnectionString')]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-05-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
      "name": "[guid(resourceId('Microsoft.Web/sites', parameters('functionAppName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2023-12-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "metadata": {
        "description": "Allows Function App Managed Identity to write to Storage Account"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
      "name": "[guid(resourceId('Microsoft.Web/sites', parameters('functionAppName')), resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6'))]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2023-12-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ],
      "metadata": {
        "description": "Allows Function App Managed Identity to use Key Vault Secrets"
      }
    },
    {
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "name": "DoNotDelete",
      "properties": {
        "level": "CanNotDelete",
        "notes": "This lock prevents the accidental deletion of resources"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        }
      }
    },
    {
      "condition": "[parameters('logsEnabled')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('logAnalyticsWorkspaceName'))]",
      "name": "All Logs and Metrics",
      "properties": {
        "logs": [
          {
            "categoryGroup": "allLogs",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "allMetrics",
            "enabled": true
          }
        ],
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      },
      "tags": {
        "[format('hidden-link:{0}', resourceId('Microsoft.Web/sites', parameters('functionAppName')))]": "Resource"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "publicNetworkAccess": "Enabled",
        "allowBlobPublicAccess": false
      }
    },
    {
      "condition": "[parameters('logsEnabled')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), 'default')]",
      "name": "All Logs and Metrics",
      "properties": {
        "logs": [
          {
            "categoryGroup": "allLogs",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "Transaction",
            "enabled": true
          }
        ],
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-12-01",
      "name": "[parameters('appServicePlanName')]",
      "location": "[parameters('location')]",
      "kind": "linux",
      "properties": {
        "reserved": true
      },
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      }
    },
    {
      "condition": "[parameters('logsEnabled')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('appServicePlanName'))]",
      "name": "All Logs and Metrics",
      "properties": {
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ],
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-12-01",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp,linux",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "httpsOnly": true,
        "reserved": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "keyVaultReferenceIdentity": "SystemAssigned",
        "siteConfig": {
          "linuxFxVersion": "POWERSHELL|7.4",
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), '2020-02-02').ConnectionString]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=StorageAccount-ConnectionString)', parameters('keyVaultName'))]"
            },
            {
              "name": "COSMOS_CONNECTION_STRING",
              "value": "[if(parameters('cosmosEnabled'), format('@Microsoft.KeyVault(VaultName={0};SecretName=CosmosDB-ConnectionString)', parameters('keyVaultName')), 'null')]"
            },
            {
              "name": "COSMOS_ENABLED",
              "value": "[format('{0}', parameters('cosmosEnabled'))]"
            },
            {
              "name": "STORAGE_ENABLED",
              "value": "[format('{0}', parameters('storageExportEnabled'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "powershell"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "https://github.com/RylandDeGregory/SpotifyExporter/blob/master/src.zip?raw=true"
            },
            {
              "name": "PLAYLIST_TYPE",
              "value": "User"
            },
            {
              "name": "SPOTIFY_CLIENT_ID",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=Spotify-ClientID)', parameters('keyVaultName'))]"
            },
            {
              "name": "SPOTIFY_CLIENT_SECRET",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=Spotify-ClientSecret)', parameters('keyVaultName'))]"
            },
            {
              "name": "SPOTIFY_REFRESH_TOKEN",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=Spotify-RefreshToken)', parameters('keyVaultName'))]"
            }
          ],
          "alwaysOn": false
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "condition": "[parameters('logsEnabled')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Web/sites/{0}', parameters('functionAppName'))]",
      "name": "All Logs and Metrics",
      "properties": {
        "logs": [
          {
            "categoryGroup": "allLogs",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ],
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "condition": "[parameters('cosmosEnabled')]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2024-05-15",
      "name": "[toLower(parameters('cosmosAccountName'))]",
      "location": "[parameters('location')]",
      "properties": {
        "enableFreeTier": true,
        "databaseAccountOfferType": "Standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "locations": [
          {
            "locationName": "[parameters('location')]"
          }
        ]
      }
    },
    {
      "condition": "[and(parameters('cosmosEnabled'), parameters('logsEnabled'))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', toLower(parameters('cosmosAccountName')))]",
      "name": "All Logs and Metrics",
      "properties": {
        "logs": [
          {
            "categoryGroup": "allLogs",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ],
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('cosmosAccountName')))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "publicNetworkAccess": "Enabled",
        "softDeleteRetentionInDays": 30,
        "tenantId": "[tenant().tenantId]"
      }
    },
    {
      "condition": "[parameters('logsEnabled')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
      "name": "All Logs and Metrics",
      "properties": {
        "logs": [
          {
            "categoryGroup": "allLogs",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ],
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ]
    }
  ]
}